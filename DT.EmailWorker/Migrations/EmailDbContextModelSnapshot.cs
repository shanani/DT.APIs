// <auto-generated />
using System;
using DT.EmailWorker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DT.EmailWorker.Migrations
{
    [DbContext(typeof(EmailDbContext))]
    partial class EmailDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProcessingError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailAttachments");
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttachmentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("AttachmentMetadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BccEmails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CcEmails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("DeliveryConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.Property<Guid>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateUsed")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ToEmails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EmailHistory_CreatedAt");

                    b.HasIndex("ProcessedBy")
                        .HasDatabaseName("IX_EmailHistory_ProcessedBy");

                    b.HasIndex("QueueId")
                        .HasDatabaseName("IX_EmailHistory_QueueId");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_EmailHistory_SentAt");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("IX_EmailHistory_TemplateId");

                    b.HasIndex("ArchivedAt", "CreatedAt")
                        .HasDatabaseName("IX_EmailHistory_ArchivedAt_CreatedAt");

                    b.HasIndex("CreatedAt", "Status")
                        .HasDatabaseName("IX_EmailHistory_CreatedAt_Status");

                    b.HasIndex("Status", "SentAt")
                        .HasDatabaseName("IX_EmailHistory_Status_SentAt");

                    b.ToTable("EmailHistory", (string)null);
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BccEmails")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CcEmails")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasEmbeddedImages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHtml")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsScheduled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)2);

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessingStartedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("RequestSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresTemplateProcessing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TemplateData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("ToEmails")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QueueId")
                        .IsUnique()
                        .HasDatabaseName("IX_EmailQueue_QueueId");

                    b.HasIndex("RetryCount")
                        .HasDatabaseName("IX_EmailQueue_RetryCount")
                        .HasFilter("[Status] = 3");

                    b.HasIndex("ScheduledFor")
                        .HasDatabaseName("IX_EmailQueue_ScheduledFor")
                        .HasFilter("[IsScheduled] = 1");

                    b.HasIndex("TemplateId");

                    b.HasIndex("Status", "Priority", "CreatedAt")
                        .HasDatabaseName("IX_EmailQueue_Status_Priority_CreatedAt");

                    b.ToTable("EmailQueue", (string)null);
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubjectTemplate")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TemplateData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_EmailTemplates_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EmailTemplates_CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_EmailTemplates_Name_Unique")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("IsActive", "Category")
                        .HasDatabaseName("IX_EmailTemplates_IsActive_Category");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.ProcessingLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContextData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long?>("EmailQueueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Exception")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("HOST_NAME()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProcessingStep")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_ProcessingLogs_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ProcessingLogs_CreatedAt");

                    b.HasIndex("EmailQueueId");

                    b.HasIndex("LogLevel")
                        .HasDatabaseName("IX_ProcessingLogs_LogLevel");

                    b.HasIndex("QueueId")
                        .HasDatabaseName("IX_ProcessingLogs_QueueId")
                        .HasFilter("[QueueId] IS NOT NULL");

                    b.HasIndex("WorkerId")
                        .HasDatabaseName("IX_ProcessingLogs_WorkerId")
                        .HasFilter("[WorkerId] IS NOT NULL");

                    b.HasIndex("LogLevel", "CreatedAt")
                        .HasDatabaseName("IX_ProcessingLogs_LogLevel_CreatedAt");

                    b.ToTable("ProcessingLogs", (string)null);
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.ScheduledEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BccEmails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CcEmails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntervalMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHtml")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastExecutedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastExecutionError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastExecutionStatus")
                        .HasColumnType("int");

                    b.Property<int?>("MaxExecutions")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("NextRunTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TemplateData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("ToEmails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("ScheduledEmails");
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.ServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AdditionalInfoJson");

                    b.Property<decimal?>("AverageProcessingTimeMs")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BatchSize")
                        .HasColumnType("int");

                    b.Property<decimal?>("CpuUsagePercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("CurrentActiveWorkers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("DiskUsagePercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("EmailsProcessedPerHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("ErrorRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<string>("LastError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastErrorAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastHeartbeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("HOST_NAME()");

                    b.Property<int>("MaxConcurrentWorkers")
                        .HasColumnType("int");

                    b.Property<decimal?>("MemoryUsageMB")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("QueueDepth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<long>("TotalEmailsFailed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("TotalEmailsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("UptimeSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("LastHeartbeat")
                        .HasDatabaseName("IX_ServiceStatus_LastHeartbeat");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ServiceStatus_Status");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ServiceStatus_UpdatedAt");

                    b.HasIndex("ServiceName", "MachineName")
                        .IsUnique()
                        .HasDatabaseName("IX_ServiceStatus_ServiceName_MachineName_Unique");

                    b.HasIndex("Status", "LastHeartbeat")
                        .HasDatabaseName("IX_ServiceStatus_Status_LastHeartbeat");

                    b.ToTable("ServiceStatus", (string)null);
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailHistory", b =>
                {
                    b.HasOne("DT.EmailWorker.Models.Entities.EmailTemplate", "Template")
                        .WithMany("EmailHistories")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailQueue", b =>
                {
                    b.HasOne("DT.EmailWorker.Models.Entities.EmailTemplate", "Template")
                        .WithMany("EmailQueues")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.ProcessingLog", b =>
                {
                    b.HasOne("DT.EmailWorker.Models.Entities.EmailQueue", null)
                        .WithMany("ProcessingLogs")
                        .HasForeignKey("EmailQueueId");

                    b.HasOne("DT.EmailWorker.Models.Entities.EmailQueue", "EmailQueue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .HasPrincipalKey("QueueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmailQueue");
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.ScheduledEmail", b =>
                {
                    b.HasOne("DT.EmailWorker.Models.Entities.EmailTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailQueue", b =>
                {
                    b.Navigation("ProcessingLogs");
                });

            modelBuilder.Entity("DT.EmailWorker.Models.Entities.EmailTemplate", b =>
                {
                    b.Navigation("EmailHistories");

                    b.Navigation("EmailQueues");
                });
#pragma warning restore 612, 618
        }
    }
}
